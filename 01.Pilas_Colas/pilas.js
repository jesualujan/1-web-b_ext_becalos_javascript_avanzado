// VAMOS A SMIULAR UNA PILA DE EJECUCI√ìN DE JAVASCRIPT
// definimos una clase Pila para gestionar una estrcutura tipo
//* L.I.F.O (Last In First Out)

class Pila {
    constructor(){
        this.items = []; // inicializamos un array vacio para almacenar los elementos de la pila
    }

    // M√©todo para  simular una pila
    // push: a√±ade un elemento a la pila
    push(elemento){
        console.log(`Push: Agregando "${elemento}" a la pila`);
        this.items.push(elemento);
    }
   // pop: elimina el elemento de la pila (el tope de la pila)
    pop(){
        if(this.isEmpty()){
            console.log("Pop: la pila est√° vac√≠a. No se puede eliminar el elemento");
            return null;
        }
        const elemento = this.items.pop(); // eliminamos el √∫ltimo elemento del array
        console.log(`Pop: eliminando "${elemento}" de la pila`);
        return elemento;
    }

    // devuelve el √∫ltimo elemento de la pila sin eliminarlo de la misma 
    peek(){
        if(this.isEmpty()){
            console.log("Peek: no se puede ver el √∫ltimo elemento de la pila, la pila est√° vac√≠a");
            return null;
        }
        const tope = this.items[this.items.length - 1 ] // accedemos al √∫ltimo elemento del array
        console.log(`Peek: el ultimo elemento de la pila es "${tope}"`);
        return tope;
    }

    // devuelve el n√∫mero de elementos de la pila
    size(){
        console.log(`Size: la pila tiene ${this.items.length} elementos`);
        return this.items.length;
    }

    //Imprime todos los elementos de la pila 
    print(){
        if(this.isEmpty()){
            console.log("Print: la pila est√° vac√≠a");
        }else{
            console.log("Contenido de la pila:" , this.items.join(","));
        }
    }

    // m√©todo auxiliar
    // verificar si la pila est√° vac√≠a
    isEmpty(){
        return this.items.length === 0;
    }
}

// === INSTANCIAR UNA PILA ===
// CREAR LOS OBJETOS DE LA CLASE Pila
// === Simulaci√≥n de una pila de ejecuci√≥n de Javascript ===
console.log("üöÄ Creando una nueva instancia de pila...");
// creamos la instancia de la clase Pila
const miPila = new Pila();
miPila.pop(); // debe ser null, ya que la pila est√° vac√≠a
// agregamos elementos a la pila
miPila.push("Libro 1");
miPila.push("Libro 2");
miPila.push("Libro 3");
miPila.push("Libro 4");
miPila.push("Libro 5");
// consultamos el elemento que est√° en el tope de la pila
miPila.peek(); 
// consultamos el tama√±o de la pila 
miPila.size();
// imprimos el contenido de la pila
miPila.print();
// eliminamos el elemento que est√° en el tope de la pila
miPila.pop();
// volvemos a consultar el tope y el tama√±o actual de la pila
miPila.peek();
miPila.size();
miPila.print();
// vaciamos por completo la pila
miPila.pop(); 
miPila.size();
miPila.pop(); 
miPila.size();
miPila.pop(); 
miPila.size();
miPila.pop();
miPila.size(); // debe ser 0
console.log("‚úÖ Fin de la simulaci√≥n");

// === Fin de la simulaci√≥n ===